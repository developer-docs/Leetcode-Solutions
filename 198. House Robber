//Method - 1 : Top Down (Recursion)

class Solution {
    int[] memo = new int[101];
    public int rob(int[] nums) {
        Arrays.fill(memo, -1);
        return solve(nums, 0);
    }
    private int solve(int[] nums, int index) {
        if (index >= nums.length) {
            return 0;
        }
        if (memo[index] != -1) {
            return memo[index];
        }
        int skipped = solve(nums, index + 1);
        int robbed = nums[index] + solve(nums, index + 2);
        return memo[index] = Math.max(skipped, robbed);
    }
}

//Method - 2 : Bottom Up (Dynamic Programming)
class Solution {
    public int rob(int[] nums) {
        int[] dp = new int[nums.length + 1];
        dp[0] = 0;
        dp[1] = nums[0];
        for (int i = 2; i <= nums.length; i++) {
            int skipped = dp[i - 1];
            int robbed = nums[i - 1] + dp[i - 2];
            dp[i] = Math.max(skipped, robbed);
        }
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < dp.length; i++) {
            max = Math.max(max, dp[i]);
        }
        return max;
    }
}

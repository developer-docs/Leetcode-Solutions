//Method - 1
class Solution {
    public String frequencySort(String s) {
        Map<Character,Integer> map = new HashMap<>();
        for(int i = 0; i < s.length(); i++){
            char ch = s.charAt(i);
            if(map.containsKey(ch)){
                map.put(ch, map.get(ch) + 1);
            }
            else{
                map.put(ch, 1);
            }
        }
        List<Character> chars = new ArrayList<>(map.keySet());
	    Collections.sort(chars, (a, b) -> map.get(b) - map.get(a));
        StringBuilder sb = new StringBuilder();
        for (Character ch : chars) {
            for (int i = 0; i < map.get(ch); i++) {
                sb.append(ch);
            }
	    }
        return sb.toString();
    }
}

//Method - 2
class Solution {
    public String frequencySort(String s) {
        if (s == null || s.length() == 0) {
            return s;
        }
        Map<Character, Integer> map = new HashMap<>();
        int maxFreq = Integer.MIN_VALUE;
        for (char ch : s.toCharArray()) {
            map.put(ch, map.getOrDefault(ch, 0) + 1);
            maxFreq = Math.max(maxFreq, map.get(ch));
        }
        List<List<Character>> buckets = new ArrayList<>();
        for (int i = 0; i <= maxFreq; i++) {
            buckets.add(new ArrayList<Character>());
        }
        for (Character key : map.keySet()) {
            int freq = map.get(key);
            buckets.get(freq).add(key);
        }
        StringBuilder sb = new StringBuilder();
        for (int bucketVal = buckets.size() - 1; bucketVal >= 1; bucketVal--) {
            for (Character ch : buckets.get(bucketVal)) {
                for (int val = 0; val < bucketVal; val++) {
                    sb.append(ch);
                }
            }
        }
        return sb.toString();
    }
}

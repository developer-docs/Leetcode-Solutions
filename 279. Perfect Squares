//Method - 1 : Top Down - Recursion + Memoization
class Solution {
    int memo[];
    public int numSquares(int n) {
        memo = new int[n + 1];
        Arrays.fill(memo, -1);
        return helper(n);
    }
    private int helper(int n) {
        if (n == 0) {
            return 0;
        }
        if (memo[n] != -1) {
            return memo[n];
        }
        int min = Integer.MAX_VALUE;
        for (int i = 1; i * i <= n; i++) {
            int curr = 1 + helper(n - i * i);
            min = Math.min(min, curr);
        }
        return memo[n] = min;
    }
}

//Method - 2 : Bottom Up DP
class Solution {
    public int numSquares(int n) {
        int[] dp = new int[n + 1];
        dp[0] = 0;
        for (int i = 1; i <= n; i++) {
            dp[i] = i;
            for (int j = 1; j * j <= i; j++) {
                int curr = 1 + dp[i - j * j];
                dp[i] = Math.min(dp[i], curr);
            }
        }
        return dp[n];
    }
}
